#pragma once
#include "interchange_context.hpp"

#include <memory>

#include <atlbase.h>
#include <atlcom.h>

#include "autogenerated/omnirig_interface.h"


namespace omnirig {

    typedef std::pair<bool, std::string> MyResult;

    class OmniRigCom {
        OmniRigCom(OmniRigCom&) = delete;

    public:
        OmniRigCom(std::shared_ptr<InterchangeContext>& interchange_context, int rig_number);

        MyResult init();
        MyResult working_loop();
        void stop();
        void setFrequency(long freq);
        void setWasStopped(bool value);
        bool wasStopped() const;

        void wait_for_init();
        bool is_initialized() const;

    private:
        std::weak_ptr<InterchangeContext> m_ctx;
        int m_rig_number;
        CComPtr<IOmniRigX> m_omniEngine;
        CComPtr<IRigX> m_rig;
        DWORD m_currentThreadId{};
        bool m_was_stopped{};
        std::condition_variable m_init_notify;
        std::mutex m_init_mtx;

    private:
        void processSDRToOmniMessage(WPARAM wParam, LPARAM lParam, MyResult& err_context);
        void processStatusChanged(MyResult& err_context);
        void processParamsChanged(long params, MyResult& err_context);
    };

}
